import { RetoolRPCConfig, Arguments, RetoolContext, RegisterFunctionSpec } from './types';
/**
 * Represents the Retool RPC for interacting with Retool functions and contexts.
 */
export declare class RetoolRPC {
    private _apiKey;
    private _hostUrl;
    private _resourceId;
    private _environmentName;
    private _pollingIntervalMs;
    private _pollingTimeoutMs;
    private _version;
    private _agentUuid;
    private _versionHash;
    private _functions;
    private _retoolApi;
    private _logger;
    /**
     * Creates an instance of the RetoolRPC class.
     */
    constructor(config: RetoolRPCConfig);
    /**
     * Asynchronously starts listening for incoming Retool function invocations.
     */
    listen(): Promise<void>;
    /**
     * Registers a Retool function with the specified function definition.
     */
    register<TArgs extends Arguments, TReturn>(spec: RegisterFunctionSpec<TArgs, TReturn>): RegisterFunctionSpec<TArgs, TReturn>['implementation'];
    /**
     * Executes a Retool function with the specified arguments and context.
     */
    executeFunction(functionName: string, functionArguments: unknown, context: RetoolContext): Promise<{
        result: any;
        arguments: Record<string, unknown>;
    }>;
    /**
     * Tests the current connection to the Retool server.
     */
    private testConnection;
    /**
     * Registers the agent with the Retool server.
     */
    private registerAgent;
    /**
     * Fetches a query from the Retool server and executes it.
     */
    private fetchQueryAndExecute;
}
